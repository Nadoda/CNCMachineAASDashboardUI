@using CNCMachineAASDashboard.Client.Services;
@using CNCMachineAASDashboard.Shared.Models.AAS;
@using Microsoft.JSInterop;
@inject NavigationManager NavigationManager
@inject IJSRuntime jSRuntime

<div class="top-row ps-3 navbar navbar-dark">
    <div class="date-time-container container-fluid">
        <a class="navbar-brand" href="">CNCMachineAASDashboard</a>
        
            <div>
                <p id="dateTimeElement"></p>
            </div>
        
    </div>
</div>


<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">

   
    <nav class="flex-column nav-item px-3" >
        
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">

            <NavLink class="nav-link" @onclick="OpenNewTab" Match="NavLinkMatch.All">
                <span  class="oi oi-browser" aria-hidden="true"></span> AAS_Server

            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="MaintenanceUI" Match="NavLinkMatch.All">
                <span class="oi oi-dashboard" aria-hidden="true"></span> MaintenanceUI
            </NavLink>
        </div>
        @*<div class="nav-item px-3">
            <NavLink class="nav-link" href="MaintenanceDashboard" Match="NavLinkMatch.All">
                <span class="oi oi-dashboard" aria-hidden="true"></span> MaintenanceDashboard
            </NavLink>
        </div>*@
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="OperationalData" Match="NavLinkMatch.All">
                <span class="oi oi-graph" aria-hidden="true"></span> OperationalData
            </NavLink>
        </div>
        
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;
    private AASModel? _model;
    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;
    [Inject]
    IConfiguration? configuration { get; set; }
    private string? url;

    
    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // Call the JavaScript function every second
            await jSRuntime.InvokeVoidAsync("updateDateTime");
            var interval = 1000; // 1 second
            await jSRuntime.InvokeVoidAsync("setInterval", "updateDateTime()", interval);
        }
    }
    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private async Task OpenNewTab()
    {
        url = configuration.GetValue<string>("HelloAAS_API");
        await NavigationManager.NavigationTonewWindow(jSRuntime, url, "Redirecting to AAS Server");
    }
    
}
