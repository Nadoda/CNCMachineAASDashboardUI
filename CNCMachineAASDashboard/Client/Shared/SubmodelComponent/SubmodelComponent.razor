
@using CNCMachineAASDashboard.Shared.Models;
@using System.Security.Cryptography;
@using System.Text;
@using System.Text.RegularExpressions;
@using Radzen.Blazor
@using System.Globalization




    <div class="card border-success mb-3">
        <div class="card-header bg-success">
            <h4>
                <a class="text-white">@_name</a>
            </h4>
        </div>
        <div>

            <ul class="list-group list-group-flush">
                <IdshortComponent _Idshort="@_submodel.idShort"></IdshortComponent>
                <IdentificationComponent _Identification="@_submodel.identification"></IdentificationComponent>
                <DescriptionComponent _Description="@_submodel.description"></DescriptionComponent>
                <SimanticIdComponent _SemanticId="@_submodel.semanticId"></SimanticIdComponent>
            </ul>
            <div class="card-body">
                @if (_submodel.submodelElements !=null)
                {
                    <div class="card border-info mb-3">

                        <button class="card-header" type="button" @onclick="ToggleMenu" style="background:#005691"><h4 class="text-white">Submodel-Elements</h4></button>
                       
                        @if(isMenuOpen== true)
                        {
                            <div class="card-body">
                                @foreach (var submodelElement in _submodel.submodelElements)
                                {
                                    @*<div class="card border-dark mb-3">
                                        <div class="card-header">
                                        <h5>
                                        <a data-toggle="collapse">@submodelElement.idShort</a>
                                        </h5>
                                        </div>

                                      </div>*@

                                    @foreach (var value in submodelElement.value)
                                    {
                                    @if(value!=null){ GetHashRequest(value.idShort); }

                                    <div class="card border-dark mb-3">
                                       
                                        <div class="card-header" >
                                            
                                                <h5>
                                                    <a data-toggle="collapse"  href="#@hashedRequestPath">@value.idShort</a>
                                                </h5>
                                         </div>
                                       
                                        <div class="collapsed" id="@hashedRequestPath">
                                            <ul class="list-group list-group-flush">
                                                <li class="list-group-item">
                                                    <div class="row align-items-center">
                                                        <div class="col-sm-2"><b>ValueType</b></div>
                                                        <div class="col-sm-10">@value.valueType</div>
                                                    </div>
                                                </li>
                                                <li class="list-group-item">
                                                    <div class="row align-items-center">

                                                        @if (value?.modelType?.name == "Property")
                                                        {
                                                           // AddData(value.value);
                                                            
                                                                <RadzenChart>
                                                                <RadzenLineSeries Smooth="true" TItem="ChartDataPoint" Data="@ChartData" CategoryProperty="Time" Title="Temp. (F)"
                                                              LineType="LineType.Solid" ValueProperty="_Value">

                                                                </RadzenLineSeries>
                                                                <RadzenValueAxis>
                                                                    <RadzenGridLines Visible="true" />
                                                                    <RadzenAxisTitle Text="Temperature" />
                                                                </RadzenValueAxis>

                                                            </RadzenChart>
                                                            
                                                            <div class="col-sm-2">@value.value</div>
                                                            
                                                        }
                                                        
                                                        
                                                    </div>
                                                </li>

                                            </ul>
                                        </div>

                                        </div>

                                        @*@ShowSubmodelElement(new List<object>() { submodel.IdShort, submodelElement });*@
                                    }


                                    @*@ShowSubmodelElement(new List<object>() { submodel.IdShort, submodelElement });*@
                                }
                            </div>
                        }
                        
                    </div>
                }
            </div>
        </div>
    </div>
   



@code {

    [Parameter]
    public string? _name { get; set; }
    [Parameter]
    public Submodel? _submodel{ get; set; }

    private string? hashedRequestPath{ get; set; }

    bool isMenuOpen = false;

    List<ChartDataPoint> ChartData = new List<ChartDataPoint>();

    //ChartDataPoint[] newDataPpoint = new ChartDataPoint[]
    //{
    //    new ChartDataPoint
    //    {
    //        Time=DateTime.Now,
    //        _Value=10
    //    },
    //    new ChartDataPoint
    //    {
    //        Time=DateTime.Now,
    //        _Value=20
    //    },
    //    new ChartDataPoint
    //    {
    //        Time=DateTime.Now,
    //        _Value=30
    //    },
    //    new ChartDataPoint
    //    {
    //        Time=DateTime.Now,
    //        _Value=40
    //    },
    //};

  

    private void AddData(object value)
    {
        ChartDataPoint newDataPpoint = new ChartDataPoint
         {
                Time = DateTime.Now,
                _Value = value
         };
        //List<ChartDataPoint> ChartData = new List<ChartDataPoint>();
        ChartData.Add(newDataPpoint);
       

    }  
    void ToggleMenu()
    {
        isMenuOpen = !isMenuOpen;
    }

    private void GetHashRequest(string value)
    {
        hashedRequestPath = GetHashString(value);
    }

    private static string GetHashString(string input)
    {
        SHA256 shaAlgorithm = SHA256.Create();
        byte[] data = Encoding.UTF8.GetBytes(input);

        byte[] bHash = shaAlgorithm.ComputeHash(data);

        string hashString = string.Empty;
        for (int i = 0; i < bHash.Length; i++)
        {
            hashString += bHash[i].ToString("x2");
        }
        var output = Regex.Replace(hashString, @"[\d-]", string.Empty);
        
        return output;
    }
    public class ChartDataPoint
    {
        public DateTime Time { get; set; }
        public object? _Value { get; set; }
    }
   
}
