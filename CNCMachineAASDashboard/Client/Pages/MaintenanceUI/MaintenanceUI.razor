@page "/MaintenanceUI";
@implements IDisposable
@using CNCMachineAASDashboard.Shared.Models.AAS;
@using CNCMachineAASDashboard.Client.Services;


@if (Submodel != null)
{
    <div class="card border-success mb-3" >
        <div class="card-header" style="background-color:#331367;justify-content:center">
            <h4 class="text-white" style="justify-content:center">
                @Submodel.idShort
            </h4>
        </div>
        <div>

            <ul class="list-group list-group-flush">
                <IdshortComponent _Idshort="@Submodel?.idShort"></IdshortComponent>
                <IdentificationComponent _Identification="@Submodel?.identification"></IdentificationComponent>
                <DescriptionComponent _Description="@Submodel?.description"></DescriptionComponent>
                <SimanticIdComponent _SemanticId="@Submodel?.semanticId"></SimanticIdComponent>
                
            </ul>

        </div>
    </div>
    @if (Submodel?.submodelElements != null)
    {
        <div class="row">
            @foreach (var se in Submodel.submodelElements)
            {
                <div class="col-4" style="display:inline-grid; position:relative;justify-content:center;min-width:350px">
                    <RadzenCard  Style="position:relative; background-color: #d5c2ea;padding-top:0px" Variant="Radzen.Variant.Filled">
                        <RadzenText Text="@se.idShort" Style="width: 236px; height: 34px; font-size: 25px; color: #0a0a0a; font-weight: 500"
                        TextAlign="Radzen.TextAlign.Center">                          
                        </RadzenText>
                        <div style="flex-direction:column;justify-content:center">
                            @if(se.idShort == "Maintenance_1"){
                                
                                <MaintenanceStatusIndicator MWValue="@MW1Value" MTValue="@MT1Value"></MaintenanceStatusIndicator>
                            }
                            else if (se.idShort == "Maintenance_2")
                            {

                                <MaintenanceStatusIndicator MWValue="@MW2Value" MTValue="@MT2Value"></MaintenanceStatusIndicator>
                            }
                            else if (se.idShort == "Maintenance_3")
                            {

                                <MaintenanceStatusIndicator MWValue="@MW3Value" MTValue="@MT3Value"></MaintenanceStatusIndicator>
                            }
                            <M_UI_SEComponent _se="se" SeIdShortPath="@se.idShort" ></M_UI_SEComponent>
                        </div>
                        
                       
                    </RadzenCard>
                </div>
            }
            
            
        </div>

    }
   
}
else
{
    <h1>Sorry! Unable to receive the data</h1>
    <div class="alert alert-warning" role="alert">
        <strong>Connection Lost!</strong> Unable to connect to the AAS Server.
    </div>
}

@code {

    public Submodel? Submodel;
    public SubmodelElement? OperatingHour;

    double MW1Value;
    double MT1Value;
    double MW2Value;
    double MT2Value;
    double MW3Value;
    double MT3Value;

    [Inject]
    private ISignalRService? SignalRService { get; set; }


    protected override async Task OnInitializedAsync()
    {
        SignalRService.OnReceivedMaintenance += HandleMaintenanceReceived;
        SignalRService.OnOperatingHourSE += HandleOHReceived;

        SignalRService.OnMaintenaceWarningSE += HandleMWReceived;
        SignalRService.OnMaintenanceThresholdSE += HandleMTReceived;
        SignalRService.OnMaintenaceWarning2SE += HandleMW2Received;
        SignalRService.OnMaintenanceThreshold2SE += HandleMT2Received;
        SignalRService.OnMaintenaceWarning3SE += HandleMW3Received;
        SignalRService.OnMaintenanceThreshold3SE += HandleMT3Received;
        await SignalRService.StartConnection();

    }
    private void HandleMaintenanceReceived(Submodel data)
    {    
        Submodel = data;

        StateHasChanged();
    }
    private void HandleOHReceived(SubmodelElement data)
    {
        OperatingHour = data;

        StateHasChanged();
    }
    private void HandleMWReceived(SubmodelElement data)
    {

        MW1Value = double.Parse(data.value.ToString());

        StateHasChanged();
    }
    private void HandleMTReceived(SubmodelElement data)
    {

        MT1Value = double.Parse(data.value.ToString());

        StateHasChanged();
    }
    private void HandleMW2Received(SubmodelElement data)
    {

        MW2Value = double.Parse(data.value.ToString());

        StateHasChanged();
    }
    private void HandleMT2Received(SubmodelElement data)
    {

        MT2Value = double.Parse(data.value.ToString());

        StateHasChanged();
    }
    private void HandleMW3Received(SubmodelElement data)
    {

        MW3Value = double.Parse(data.value.ToString());

        StateHasChanged();
    }
    private void HandleMT3Received(SubmodelElement data)
    {

        MT3Value = double.Parse(data.value.ToString());

        StateHasChanged();
    }

    public async void Dispose()
    {
        SignalRService.OnReceivedMaintenance -= HandleMaintenanceReceived;
        SignalRService.OnOperatingHourSE -= HandleOHReceived;

        SignalRService.OnMaintenaceWarningSE -= HandleMWReceived;
        SignalRService.OnMaintenanceThresholdSE -= HandleMTReceived;
        SignalRService.OnMaintenaceWarning2SE -= HandleMW2Received;
        SignalRService.OnMaintenanceThreshold2SE -= HandleMT2Received;
        SignalRService.OnMaintenaceWarning3SE -= HandleMW3Received;
        SignalRService.OnMaintenanceThreshold3SE -= HandleMT3Received;
    }
   
}
