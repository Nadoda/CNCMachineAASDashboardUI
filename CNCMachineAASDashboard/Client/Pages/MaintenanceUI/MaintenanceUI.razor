@page "/MaintenanceUI";
@using CNCMachineAASDashboard.Shared.Models.AAS;
@using CNCMachineAASDashboard.Client.Services;

@inject ISignalRService SignalRService;

<PageTitle>Maintenance UI</PageTitle>



@if (Submodel != null)
{
    <div class="card border-success mb-3">
        <div class="card-header bg-success">
            <h4 class="text-white">
                @Submodel.idShort
                @*<a class="text-white">@Submodel.idShort Dashboard</a>*@
            </h4>
        </div>
        <div>

            <ul class="list-group list-group-flush">
                <IdshortComponent _Idshort="@Submodel?.idShort"></IdshortComponent>
                <IdentificationComponent _Identification="@Submodel?.identification"></IdentificationComponent>
                <DescriptionComponent _Description="@Submodel?.description"></DescriptionComponent>
                <SimanticIdComponent _SemanticId="@Submodel?.semanticId"></SimanticIdComponent>
            </ul>

        </div>
    </div>

    @if(Submodel?.submodelElements != null)
    {
        <div class="container-fluid">

            <div class="row">
                @foreach (var se in Submodel.submodelElements)
                {
                    <div class="col-md-6">
                        <div class="grid-item">
                            <div class="card bg-dark mb-3">
                                <div class="card-header"><h4 class="text-white">@se.idShort</h4></div>

                                <SMEcomponent _se="@se"></SMEcomponent>

                            </div>

                        </div>
                    </div>
                }
            </div>

        </div>
    }

    
}
else
{
    <h1>Sorry! There is nothing at this Page</h1>
    <h1>Check your SignalR status</h1>
}

@code {
    
    public Submodel? Submodel;


    protected override async Task OnInitializedAsync()
    {
        SignalRService.OnReceivedMaintenance += HandleMessageReceived;
        await SignalRService.StartConnection();
        
    }
    private void HandleMessageReceived(Submodel data)
    {    
        Submodel = data;
      
        StateHasChanged();
    }
}
