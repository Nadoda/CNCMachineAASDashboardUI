@page "/"
@using BaSyx.AAS.Client.Http;
@using CNCMachineAASDashboard.Client.Services;
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.AspNetCore.Hosting;
@using BaSyx.Utils.ResultHandling;
@using BaSyx.Models.Core.AssetAdministrationShell.Implementations;
@using BaSyx.Models.Core.AssetAdministrationShell.Generics;
@*@using Newtonsoft.Json;*@
@using System.Text.Json.Nodes;
@using System.Text.Json;
@using CNCMachineAASDashboard.Shared.Models;
@using CNCMachineAASDashboard.Client.Pages.AAS;
@using Newtonsoft.Json;

@inject NavigationManager NavigationManager
@inject ISignalRService signalRservice



@*<h1> @SignalRData?.GetType() </h1>
<h1> @SignalRData </h1>*@

<h1> @aas?.idShort asset administration shell web ui</h1>

@*<h1> @json?.GetType() </h1>
<h1> @json </h1>*@


@if (aas != null)
{
    <div class="starter-template">
    
    @*<h2>generic ui to discover the asset administration shell</h2>*@
    </div>

    
    <div class="card bg-dark mb-3">
        <div class="card-header"><h4 class="text-white">Asset Administration Shell</h4></div>
        <ul class="list-group list-group-flush">

            <IdshortComponent _Idshort="@aas.idShort"></IdshortComponent>
            <IdentificationComponent _Identification="@aas.identification"></IdentificationComponent>
            <DescriptionComponent _Description="@aas.description"></DescriptionComponent>

        </ul>
    </div>

   

    <AssetComponent asset="@aas.asset"></AssetComponent>
   

}
else
{
    <h1>not getting the AAS</h1>

 }
 



@code {


    private HubConnection? hubConnection;

    public bool IsConnected;

    private AASModel? aas;
    //private AssetAdministrationShell? aas;
    public string? SignalRData;
    public dynamic? json;


    protected override async Task OnInitializedAsync()

    {


        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/dataSend")).Build();


        hubConnection.On<AASModel>("AASdataSend", data =>
        {



            SignalRData = data.ToString();

            Console.WriteLine(SignalRData.GetType());







            if(data!= null)
            {
                //var reslt = System.Text.Json.JsonSerializer.Deserialize<AASModel>(data?.ToString());
                // Console.WriteLine(reslt?.idShort);

                aas = data;
                

               // var Deserialize = JsonSerializer.Deserialize<AssetAdministrationShell>(SignalRData);
                //var Deserialize =JsonSerializer.Deserialize<AssetAdministrationShell>(data.ToString());
                //aas = JsonConvert.DeserializeObject<IAssetAdministrationShell>(data);
               // aas = Deserialize;

            }
            else{ json = "Sorry this is null"; }

            StateHasChanged();
        });
        await hubConnection.StartAsync();

        IsConnected = hubConnection.State == HubConnectionState.Connected ? true : false;
        StateHasChanged();
        
    }
    //var aasdata = signalRservice.AASSerializedData;
    //var Deserialize = JsonSerializer.Deserialize<AASModel>(aasdata);
    //aas = Deserialize;
    //StateHasChanged();
    //await signalRservice.StartConnection();
    //StateHasChanged();
  
}


 