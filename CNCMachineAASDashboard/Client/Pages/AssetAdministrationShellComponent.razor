@page "/"

@using CNCMachineAASDashboard.Client.Services;
@using BaSyx.Models.Core.AssetAdministrationShell.Implementations;
@using CNCMachineAASDashboard.Shared.Models.AAS;


@inject ISignalRService SignalRService



<h1> @aas?.idShort asset administration shell web ui</h1>



@if (aas != null)
{
    <div class="starter-template">
    
        @*<h1>SignalR IsConnected: @SignalRService.IsConnected</h1>*@
    </div>

    
    <div class="card bg-dark mb-3">
        <div class="card-header"><h4 class="text-white">Asset Administration Shell</h4></div>
        <ul class="list-group list-group-flush">

            <IdshortComponent _Idshort="@aas.idShort"></IdshortComponent>
            <IdentificationComponent _Identification="@aas.identification"></IdentificationComponent>
            <DescriptionComponent _Description="@aas.description"></DescriptionComponent>

        </ul>
    </div>

   

    <AssetComponent asset="@aas.asset"></AssetComponent>
    @*<input type="text" @bind="@message" @onkeypress="HandleKeyPress" />*@
    @*<button @onclick="async () => await SignalRService.SendMessage(message) "></button>*@
    @if (messageList != null)
    {
        @foreach (var item in messageList)
        {
            <h1> @item </h1>
        }
    }
   
    
}
else
{
    <h1>not getting the AAS</h1>

 }
 



@code {

    private AASModel? aas;
    //private AssetAdministrationShell? aas;
    public string? message;
    public List<string>? messageList;


    protected override async Task OnInitializedAsync()
    {

        SignalRService.OnReceivedAAS += HandleMessageReceived;
        SignalRService.OnReceivedMessage += HandleMessage;
        await SignalRService.StartConnection();
        List<string> newList = new List<string>();
        messageList = newList;
    }
    private void HandleMessageReceived(AASModel data)
    {
      
        aas = data;

        StateHasChanged();
    }
    private void HandleMessage(string data)
    {


        messageList?.Add(data);

        StateHasChanged();
    }
    //private async Task HandleKeyPress(KeyboardEventArgs e)
    //{
    //    if (e.Key == "Enter" && message!=null)
    //    {
    //        await SignalRService.SendMessage(message);
    //        // Trigger the desired functionality
    //        // You can access the input value using the 'inputValue' property
    //        // Add your logic here
    //    }
    //}
  
}


 