@page "/MaintenanceDashboard";

@implements IDisposable
@using Microsoft.AspNetCore.SignalR.Client;
@using CNCMachineAASDashboard.Shared.Models.AAS;
@using CNCMachineAASDashboard.Client.Services;


<PageTitle>Maintenance Dashboard</PageTitle>



@if (Submodel != null)
{
    <div class="card border-success mb-3">
        <div class="card-header bg-secondary">
            <h4 class="text-white">
                @Submodel.idShort
            </h4>
        </div>
        <div>

            <ul class="list-group list-group-flush">
                <IdshortComponent _Idshort="@Submodel?.idShort"></IdshortComponent>
                <IdentificationComponent _Identification="@Submodel?.identification"></IdentificationComponent>
                <DescriptionComponent _Description="@Submodel?.description"></DescriptionComponent>
                <SimanticIdComponent _SemanticId="@Submodel?.semanticId"></SimanticIdComponent>
            </ul>
            
        </div>
    </div>


    @if (Submodel?.submodelElements != null)
    {
        <div class="container-fluid">
            @foreach (var se in Submodel.submodelElements)
            {
                <SMEcomponent SubmodelId="@Submodel.idShort" SeIdShortPath="@se.idShort" _se="@se" color="#AAE4F3"></SMEcomponent>
                
            }
            
        </div>
    }
    
}
else
{
    <h1>Sorry! Unable to receive the data</h1>
    <div class="alert alert-warning" role="alert">
        <strong>Connection Lost!</strong> Unable to connect to the AAS Server.
    </div>
}




@code {

 

    
    public Submodel? Submodel;

    public object? SignalRData;
    [Inject]
    private ISignalRService SignalRService { get; set; }
  

    protected override async Task OnInitializedAsync()
    {
        SignalRService.OnReceivedMaintenance += HandleMessageReceived;
        await SignalRService.StartConnection();


    }
    private void HandleMessageReceived(Submodel data)
    {
        SignalRData = data.ToString();

        Submodel = data;

        StateHasChanged();
    }
    
    public void Dispose()
    {
        SignalRService.OnReceivedMaintenance -= HandleMessageReceived;

    }

}
