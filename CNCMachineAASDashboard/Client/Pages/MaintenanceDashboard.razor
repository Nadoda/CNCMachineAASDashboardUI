@page "/MaintenanceDashboard";

@using Microsoft.AspNetCore.SignalR.Client;
@using CNCMachineAASDashboard.Shared.Models.AAS;
@using CNCMachineAASDashboard.Client.Services;

@inject NavigationManager NavigationManager;
@inject ISignalRService SignalRService;
<PageTitle>Maintenance Dashboard</PageTitle>

<h1>An Issue while incrementing the OH with Timer instead Delay</h1>

@if (Submodel != null)
{
    <div class="card border-success mb-3">
        <div class="card-header bg-success">
            <h4 class="text-white">
                @Submodel.idShort
            </h4>
        </div>
        <div>

            <ul class="list-group list-group-flush">
                <IdshortComponent _Idshort="@Submodel?.idShort"></IdshortComponent>
                <IdentificationComponent _Identification="@Submodel?.identification"></IdentificationComponent>
                <DescriptionComponent _Description="@Submodel?.description"></DescriptionComponent>
                <SimanticIdComponent _SemanticId="@Submodel?.semanticId"></SimanticIdComponent>
            </ul>
            
        </div>
    </div>


    @if (Submodel?.submodelElements != null)
    {
        <div class="container-fluid">

            <div class="row">
                @foreach (var se in Submodel.submodelElements)
                {
                    <div class="col-md-6">
                        <div class="grid-item">
                            <div class="card bg-dark mb-3">
                                <div class="card-header"><h4 class="text-white">@se.idShort</h4></div>

                                <SMEcomponent _se="@se"></SMEcomponent>
                                
                            </div>

                        </div>
                    </div>
                }
            </div>

        </div>
    }
    
}
else
{
    <h1>Sorry! There is nothing at this Page</h1>
    <h1>Check your SignalR status</h1>
}




@code {

    //[Inject]
    //private ISignalRService SignalRService { get; set; }
    //private HubConnection? hubConnection;

    //public bool IsConnected;
    
    public Submodel? Submodel;

    public object? SignalRData;





    protected override async Task OnInitializedAsync()
    {
        SignalRService.OnReceivedMaintenance += HandleMessageReceived;
        await SignalRService.StartConnection();


        //hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/dataSend")).Build();


        //hubConnection.On<Submodel>("MaintenancedataSend", data =>
        //{

        //    SignalRData = data;

        //    if (data != null)
        //    {

        //        Submodel = data;

        //    }

        //    StateHasChanged();
        //});
        //await hubConnection.StartAsync();

        //IsConnected = hubConnection.State == HubConnectionState.Connected ? true : false;
        //StateHasChanged();

    }
    private void HandleMessageReceived(Submodel data)
    {
        SignalRData = data.ToString();

        Submodel = data;

        StateHasChanged();
    }

}
