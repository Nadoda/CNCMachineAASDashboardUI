@page "/OperationalData";

@using Microsoft.AspNetCore.SignalR.Client;
@using System.Security.Cryptography;
@using System.Text.RegularExpressions;
@using System.Text;
@using CNCMachineAASDashboard.Shared.Models.AAS;

@inject NavigationManager NavigationManager;


<div class="card border-success mb-3">
    <div class="card-header bg-success">
        <h4>
            <div class="card-header"><h4 class="text-white">@_submodel.idShort</h4></div>
            @*<a class="text-white">@Submodel.idShort Dashboard</a>*@
        </h4>
    </div>
    <div>

        <ul class="list-group list-group-flush">
            <IdshortComponent _Idshort="@_submodel?.idShort"></IdshortComponent>
            <IdentificationComponent _Identification="@_submodel?.identification"></IdentificationComponent>
            <DescriptionComponent _Description="@_submodel?.description"></DescriptionComponent>
            <SimanticIdComponent _SemanticId="@_submodel?.semanticId"></SimanticIdComponent>
        </ul>

    </div>
    <div class="container-fluid">

        @foreach (var se in _submodel.submodelElements)
        {
            
               <div class="card-body">


                 <SMEcomponent _se="@se"></SMEcomponent>


               </div>

        }

    </div>
</div>

  


@code {
    private HubConnection? hubConnection;
    public bool IsConnected;

    public Submodel? _submodel;

    public object? SignalRData;

    private List<object>? temperature { get; set; }



    protected override async Task OnInitializedAsync()

    {

        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/dataSend")).Build();


        hubConnection.On<Submodel>("OperationaldataSend", data =>
        {

            SignalRData = data;

            if (data != null)
            {

                _submodel = data;
                

            }

            StateHasChanged();
        });
        await hubConnection.StartAsync();

        IsConnected = hubConnection.State == HubConnectionState.Connected ? true : false;
        StateHasChanged();

    }
}
